esphome:
  name: mqttswitch_solder
  platform: ESP8266
  board: d1_mini

wifi:
  ssid: "wifi2.4"
  password: "password"
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Solder Button"
    password: "password"
captive_portal:

# Enable logging
logger:

# Enable Home Assistant API
api:
  password: "password"

ota:
  password: "password"

mqtt:
  broker: 192.168.1.17
  username: mqtt
  password: password
  on_message:
    - topic: nodered/solderState
      payload: 'running'
      then:
        - display.page.show: page2_running
    - topic: nodered/solderState
      payload: 'stopped'
      then:
        - display.page.show: page1_idle
  
font:
  - file: 'slkscr.ttf'
    id: font1
    size: 9
  - file: 'BebasNeue-Regular.ttf'
    id: font2
    size: 48
  - file: 'arial.ttf'
    id: font3
    size: 14
  - file: 'BebasNeue-Regular.ttf'
    id: font4
    size: 24
  - file: 'slkscr.ttf'
    id: font5
    size: 14

text_sensor:
  - platform: mqtt_subscribe
    id: solderTimeRemaining
    topic: nodered/solderTimeRemaining
  - platform: mqtt_subscribe
    id: solderButtonState
    topic: nodered/solderState

binary_sensor:
  - platform: gpio
    name: solderplus
    pin:
      number: D4
      mode: INPUT_PULLUP
      inverted: true
    filters:
      - delayed_on: 10ms
    on_multi_click:
      - timing:
          - ON for 0.5s to 2s
          - OFF for at least 0.5s
        then:
          - logger.log: "Single Long Clicked"
          - mqtt.publish:
              topic: mqttswitch_solder/buttonClick
              payload: "long"
      - timing:
          - ON for at most 0.5s
          - OFF for at least 0.2s
        then:
          - logger.log: "Single Short Clicked"
          - mqtt.publish:
              topic: mqttswitch_solder/buttonClick
              payload: "short"

i2c:
  sda: D1
  scl: D2
  scan: False

display:
  - platform: ssd1306_i2c
    model: "SH1106 128x64"
    reset_pin: D0
    address: 0x3C
    pages:
      - id: page1_idle
        lambda: |-
          it.printf(64, 0, id(font3), TextAlign::TOP_CENTER, "Soldering Iron");
          it.printf(64, 25, id(font4), TextAlign::TOP_CENTER, "%s", id(solderButtonState).state.c_str());
      - id: page2_running
        lambda: |-
          // it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "MQTT Soldering Button");
          it.printf(64, 0, id(font1), TextAlign::TOP_CENTER, "State: %s", id(solderButtonState).state.c_str());
          it.printf(64, 15, id(font2), TextAlign::TOP_CENTER, "%s", id(solderTimeRemaining).state.c_str());